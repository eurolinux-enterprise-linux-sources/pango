<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="PangoFT2" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="fontconfig" version="2.0"/>
  <include name="freetype2" version="2.0"/>
  <package name="cairo"/>
  <package name="gobject-2.0"/>
  <namespace name="PangoCairo"
             version="1.0"
             shared-library="libpangocairo-1.0.so.0"
             c:prefix="PangoCairo">
    <class name="FcFontMap"
           c:type="PangoCairoFcFontMap"
           parent="PangoFT2.PangoFcFontMap"
           glib:type-name="PangoCairoFcFontMap"
           glib:get-type="pango_cairo_fc_font_map_get_type">
      <implements name="FontMap"/>
      <field name="parent_instance">
        <type name="PangoFT2.PangoFcFontMap" c:type="PangoFcFontMap"/>
      </field>
      <field name="dpi">
        <type name="double" c:type="double"/>
      </field>
      <field name="library">
        <type name="freetype2.Library" c:type="FT_Library"/>
      </field>
    </class>
    <interface name="Font"
               c:type="PangoCairoFont"
               doc="#PangoCairoFont is an interface exported by fonts for
use with Cairo. The actual type of the font will depend
on the particular font technology Cairo was compiled to use."
               version="1.18"
               glib:type-name="PangoCairoFont"
               glib:get-type="pango_cairo_font_get_type"
               glib:type-struct="FontIface">
      <prerequisite name="Pango.Font"/>
      <virtual-method name="create_font_face">
        <return-value transfer-ownership="full">
          <type name="cairo.FontFace" c:type="cairo_font_face_t*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="create_base_metrics_for_context">
        <return-value transfer-ownership="full">
          <type name="Pango.FontMetrics" c:type="PangoFontMetrics*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Pango.Context" c:type="PangoContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_scaled_font"
              c:identifier="pango_cairo_font_get_scaled_font"
              doc="Gets the #cairo_scaled_font_t used by @font.
The scaled font can be referenced and kept using
cairo_scaled_font_reference().
or %NULL if @font is %NULL."
              version="1.18">
        <return-value transfer-ownership="full">
          <type name="cairo.ScaledFont" c:type="cairo_scaled_font_t*"/>
        </return-value>
      </method>
    </interface>
    <record name="FontGlyphExtentsCacheEntry"
            c:type="PangoCairoFontGlyphExtentsCacheEntry">
    </record>
    <record name="FontHexBoxInfo" c:type="PangoCairoFontHexBoxInfo">
      <field name="font" writable="1">
        <type name="Font" c:type="PangoCairoFont*"/>
      </field>
      <field name="rows" writable="1">
        <type name="int" c:type="int"/>
      </field>
      <field name="digit_width" writable="1">
        <type name="double" c:type="double"/>
      </field>
      <field name="digit_height" writable="1">
        <type name="double" c:type="double"/>
      </field>
      <field name="pad_x" writable="1">
        <type name="double" c:type="double"/>
      </field>
      <field name="pad_y" writable="1">
        <type name="double" c:type="double"/>
      </field>
      <field name="line_width" writable="1">
        <type name="double" c:type="double"/>
      </field>
      <field name="box_descent" writable="1">
        <type name="double" c:type="double"/>
      </field>
      <field name="box_height" writable="1">
        <type name="double" c:type="double"/>
      </field>
    </record>
    <record name="FontIface"
            c:type="PangoCairoFontIface"
            glib:is-gtype-struct-for="Font">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="create_font_face">
        <callback name="create_font_face" c:type="create_font_face">
          <return-value transfer-ownership="full">
            <type name="cairo.FontFace" c:type="cairo_font_face_t*"/>
          </return-value>
          <parameters>
            <parameter name="cfont" transfer-ownership="none">
              <type name="Font" c:type="PangoCairoFont*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_base_metrics_for_context">
        <callback name="create_base_metrics_for_context"
                  c:type="create_base_metrics_for_context">
          <return-value transfer-ownership="full">
            <type name="Pango.FontMetrics" c:type="PangoFontMetrics*"/>
          </return-value>
          <parameters>
            <parameter name="cfont" transfer-ownership="none">
              <type name="Font" c:type="PangoCairoFont*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Pango.Context" c:type="PangoContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cf_priv_offset">
        <type name="ssize_t" c:type="gssize"/>
      </field>
    </record>
    <interface name="FontMap"
               c:type="PangoCairoFontMap"
               doc="#PangoCairoFontMap is an interface exported by font maps for
use with Cairo. The actual type of the font map will depend
on the particular font technology Cairo was compiled to use."
               version="1.10"
               glib:type-name="PangoCairoFontMap"
               glib:get-type="pango_cairo_font_map_get_type"
               glib:type-struct="FontMapIface">
      <prerequisite name="Pango.FontMap"/>
      <virtual-method name="set_resolution" invoker="set_resolution">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dpi" transfer-ownership="none">
            <type name="double" c:type="double"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_resolution" invoker="get_resolution">
        <return-value transfer-ownership="none">
          <type name="double" c:type="double"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_font_type" invoker="get_font_type">
        <return-value transfer-ownership="full">
          <type name="cairo.FontType" c:type="cairo_font_type_t"/>
        </return-value>
      </virtual-method>
      <method name="set_default"
              c:identifier="pango_cairo_font_map_set_default"
              doc="Sets a default #PangoCairoFontMap to use with Cairo.
This can be used to change the Cairo font backend that the
default fontmap uses for example.  The old default font map
is unreffed and the new font map referenced.
A value of %NULL for @fontmap will cause the current default
font map to be released and a new default font
map to be created on demand, using pango_cairo_font_map_new()."
              version="1.22">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_font_type"
              c:identifier="pango_cairo_font_map_get_font_type"
              doc="Gets the type of Cairo font backend that @fontmap uses."
              version="1.18">
        <return-value transfer-ownership="full">
          <type name="cairo.FontType" c:type="cairo_font_type_t"/>
        </return-value>
      </method>
      <method name="set_resolution"
              c:identifier="pango_cairo_font_map_set_resolution"
              doc="involved; the terminology is conventional.)
Sets the resolution for the fontmap. This is a scale factor between
points specified in a #PangoFontDescription and Cairo units. The
default value is 96, meaning that a 10 point font will be 13
units high. (10 * 96. / 72. = 13.3)."
              version="1.10">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dpi" transfer-ownership="none">
            <type name="double" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_resolution"
              c:identifier="pango_cairo_font_map_get_resolution"
              doc="Gets the resolution for the fontmap. See pango_cairo_font_map_set_resolution()"
              version="1.10">
        <return-value transfer-ownership="none">
          <type name="double" c:type="double"/>
        </return-value>
      </method>
      <method name="create_context"
              c:identifier="pango_cairo_font_map_create_context"
              doc="Create a #PangoContext for the given fontmap."
              version="1.10"
              deprecated="Use pango_font_map_create_context() instead."
              deprecated-version="1.22">
        <return-value transfer-ownership="full">
          <type name="Pango.Context" c:type="PangoContext*"/>
        </return-value>
      </method>
    </interface>
    <record name="FontMapIface"
            c:type="PangoCairoFontMapIface"
            glib:is-gtype-struct-for="FontMap">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_resolution">
        <callback name="set_resolution" c:type="set_resolution">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <type name="FontMap" c:type="PangoCairoFontMap*"/>
            </parameter>
            <parameter name="dpi" transfer-ownership="none">
              <type name="double" c:type="double"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_resolution">
        <callback name="get_resolution" c:type="get_resolution">
          <return-value transfer-ownership="none">
            <type name="double" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <type name="FontMap" c:type="PangoCairoFontMap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_font_type">
        <callback name="get_font_type" c:type="get_font_type">
          <return-value transfer-ownership="full">
            <type name="cairo.FontType" c:type="cairo_font_type_t"/>
          </return-value>
          <parameters>
            <parameter name="fontmap" transfer-ownership="none">
              <type name="FontMap" c:type="PangoCairoFontMap*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FontPrivate" c:type="PangoCairoFontPrivate">
      <field name="cfont" writable="1">
        <type name="Font" c:type="PangoCairoFont*"/>
      </field>
      <field name="data" writable="1">
        <type name="FontPrivateScaledFontData"
              c:type="PangoCairoFontPrivateScaledFontData*"/>
      </field>
      <field name="scaled_font" writable="1">
        <type name="cairo.ScaledFont" c:type="cairo_scaled_font_t*"/>
      </field>
      <field name="hbi" writable="1">
        <type name="FontHexBoxInfo" c:type="PangoCairoFontHexBoxInfo*"/>
      </field>
      <field name="is_hinted" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </field>
      <field name="gravity" writable="1">
        <type name="Pango.Gravity" c:type="PangoGravity"/>
      </field>
      <field name="font_extents" writable="1">
        <type name="Pango.Rectangle" c:type="PangoRectangle"/>
      </field>
      <field name="glyph_extents_cache" writable="1">
        <type name="FontGlyphExtentsCacheEntry"
              c:type="PangoCairoFontGlyphExtentsCacheEntry*"/>
      </field>
      <field name="metrics_by_lang" writable="1">
        <type name="GLib.SList" c:type="GSList*"/>
      </field>
    </record>
    <record name="FontPrivateScaledFontData"
            c:type="PangoCairoFontPrivateScaledFontData">
      <field name="font_matrix" writable="1">
        <type name="cairo.Matrix" c:type="cairo_matrix_t"/>
      </field>
      <field name="ctm" writable="1">
        <type name="cairo.Matrix" c:type="cairo_matrix_t"/>
      </field>
      <field name="options" writable="1">
        <type name="cairo.FontOptions" c:type="cairo_font_options_t*"/>
      </field>
    </record>
    <constant name="HEIGHT_SQUARES" value="2.5">
      <type name="double"/>
    </constant>
    <class name="Renderer"
           c:type="PangoCairoRenderer"
           parent="Pango.Renderer"
           glib:type-name="PangoCairoRenderer"
           glib:get-type="pango_cairo_renderer_get_type">
    </class>
    <callback name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="attr" transfer-ownership="none">
          <type name="Pango.AttrShape" c:type="PangoAttrShape*"/>
        </parameter>
        <parameter name="do_path" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function name="context_get_font_options"
              c:identifier="pango_cairo_context_get_font_options"
              doc="Retrieves any font rendering options previously set with
pango_cairo_font_map_set_font_options(). This function does not report options
that are derived from the target surface by pango_cairo_update_context()
if no options have been set. This value is owned by the context
and must not be modified or freed."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="cairo.FontOptions" c:type="cairo_font_options_t*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_resolution"
              c:identifier="pango_cairo_context_get_resolution"
              doc="Gets the resolution for the context. See pango_cairo_context_set_resolution()
be returned if no resolution has previously been set."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="double" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_shape_renderer"
              c:identifier="pango_cairo_context_get_shape_renderer"
              doc="Sets callback function for context to use for rendering attributes
of type %PANGO_ATTR_SHAPE.  See #PangoCairoShapeRendererFunc for
details.
Retrieves callback function and associated user data for rendering
attributes of type %PANGO_ATTR_SHAPE as set by
pango_cairo_context_set_shape_renderer(), if any.
if no shape rendering callback have been set."
              version="1.18">
      <return-value transfer-ownership="full">
        <type name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_font_options"
              c:identifier="pango_cairo_context_set_font_options"
              doc="options. A copy is made.
Sets the font options used when rendering text with this context.
These options override any options that pango_cairo_update_context()
derives from the target surface."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <type name="cairo.FontOptions" c:type="cairo_font_options_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_resolution"
              c:identifier="pango_cairo_context_set_resolution"
              doc="involved; the terminology is conventional.) A 0 or negative value
means to use the resolution from the font map.
Sets the resolution for the context. This is a scale factor between
points specified in a #PangoFontDescription and Cairo units. The
default value is 96, meaning that a 10 point font will be 13
units high. (10 * 96. / 72. = 13.3)."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="dpi" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_shape_renderer"
              c:identifier="pango_cairo_context_set_shape_renderer"
              doc="%PANGO_ATTR_SHAPE, or %NULL to disable shape rendering.
context is freed to release @data, or %NULL.
Sets callback function for context to use for rendering attributes
of type %PANGO_ATTR_SHAPE.  See #PangoCairoShapeRendererFunc for
details."
              version="1.18">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <type name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
        <parameter name="dnotify" transfer-ownership="none" scope="call">
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_context"
              c:identifier="pango_cairo_create_context"
              doc="Creates a context object set up to match the current transformation
and target surface of the Cairo context.  This context can then be
used to create a layout using pango_layout_new().
This function is a convenience function that creates a context using
the default font map, then updates it to @cr.  If you just need to
create a layout for use with @cr and do not need to access #PangoContext
directly, you can use pango_cairo_create_layout() instead.
g_object_unref()."
              version="1.22">
      <return-value transfer-ownership="full">
        <type name="Pango.Context" c:type="PangoContext*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_layout"
              c:identifier="pango_cairo_create_layout"
              doc="Creates a layout object set up to match the current transformation
and target surface of the Cairo context.  This layout can then be
used for text measurement with functions like
pango_layout_get_size() or drawing with functions like
pango_cairo_show_layout(). If you change the transformation
or target surface for @cr, you need to call pango_cairo_update_layout()
This function is the most convenient way to use Cairo with Pango,
however it is slightly inefficient since it creates a separate
#PangoContext object for each layout. This might matter in an
application that was laying out large amounts of text.
g_object_unref()."
              version="1.10">
      <return-value transfer-ownership="full">
        <type name="Pango.Layout" c:type="PangoLayout*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_underline_path"
              c:identifier="pango_cairo_error_underline_path"
              doc="Add a squiggly line to the current path in the specified cairo context that
approximately covers the given rectangle in the style of an underline used
to indicate a spelling error.  (The width of the underline is rounded to an
integer number of up/down segments and the resulting rectangle is centered
in the original rectangle)"
              version="1.14">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_map_get_default"
              c:identifier="pango_cairo_font_map_get_default"
              doc="Gets a default #PangoCairoFontMap to use with Cairo.
Note that the type of the returned object will depend
on the particular font backend Cairo was compiled to use;
You generally should only use the #PangoFontMap and
#PangoCairoFontMap interfaces on the returned object.
The default Cairo fontmap can be changed by using
pango_cairo_font_map_set_default().  This can be used to
change the Cairo font backend that the default fontmap
uses for example.
object is owned by Pango and must not be freed."
              version="1.10">
      <return-value transfer-ownership="full">
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
    </function>
    <function name="font_map_new"
              c:identifier="pango_cairo_font_map_new"
              doc="Creates a new #PangoCairoFontMap object; a fontmap is used
to cache information about available fonts, and holds
certain global parameters such as the resolution.
In most cases, you can use pango_cairo_font_map_get_default()
instead.
Note that the type of the returned object will depend
on the particular font backend Cairo was compiled to use;
You generally should only use the #PangoFontMap and
#PangoCairoFontMap interfaces on the returned object.
be freed with g_object_unref()."
              version="1.10">
      <return-value transfer-ownership="full">
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
    </function>
    <function name="font_map_new_for_font_type"
              c:identifier="pango_cairo_font_map_new_for_font_type"
              doc="Creates a new #PangoCairoFontMap object of the type suitable
to be used with cairo font backend of type @fonttype.
In most cases one should simply use @pango_cairo_font_map_new(),
or in fact in most of those cases, just use
which should be freed with g_object_unref(),
or %NULL if the requested cairo font backend is
not supported / compiled in."
              version="1.18">
      <return-value transfer-ownership="full">
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
      <parameters>
        <parameter name="fonttype" transfer-ownership="none">
          <type name="cairo.FontType" c:type="cairo_font_type_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="glyph_string_path"
              c:identifier="pango_cairo_glyph_string_path">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <type name="Pango.Font" c:type="PangoFont*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <type name="Pango.GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="layout_line_path"
              c:identifier="pango_cairo_layout_line_path"
              doc="Adds the text in #PangoLayoutLine to the current path in the
specified cairo context.  The origin of the glyphs (the left edge
of the line) will be at the current point of the cairo context."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <type name="Pango.LayoutLine" c:type="PangoLayoutLine*"/>
        </parameter>
      </parameters>
    </function>
    <function name="layout_path"
              c:identifier="pango_cairo_layout_path"
              doc="Adds the text in a #PangoLayout to the current path in the
specified cairo context.  The top-left corner of the #PangoLayout
will be at the current point of the cairo context."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_error_underline"
              c:identifier="pango_cairo_show_error_underline"
              doc="Draw a squiggly line in the specified cairo context that approximately
covers the given rectangle in the style of an underline used to indicate a
spelling error.  (The width of the underline is rounded to an integer
number of up/down segments and the resulting rectangle is centered in the
original rectangle)"
              version="1.14">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <type name="double" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_glyph_item"
              c:identifier="pango_cairo_show_glyph_item"
              doc="Draws the glyphs in @glyph_item in the specified cairo context,
embedding the text associated with the glyphs in the output if the
output format supports it (PDF for example), otherwise it acts
similar to pango_cairo_show_glyph_string().
The origin of the glyphs (the left edge of the baseline) will
be drawn at the current point of the cairo context.
Note that @text is the start of the text for layout, which is then
indexed by &lt;literal&gt;@glyph_item-&gt;item-&gt;offset&lt;/literal&gt;."
              version="1.22">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="glyph_item" transfer-ownership="none">
          <type name="Pango.GlyphItem" c:type="PangoGlyphItem*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_glyph_string"
              c:identifier="pango_cairo_show_glyph_string"
              doc="Draws the glyphs in @glyphs in the specified cairo context.
The origin of the glyphs (the left edge of the baseline) will
be drawn at the current point of the cairo context."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <type name="Pango.Font" c:type="PangoFont*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <type name="Pango.GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_layout"
              c:identifier="pango_cairo_show_layout"
              doc="Draws a #PangoLayout in the specified cairo context.
The top-left corner of the #PangoLayout will be drawn
at the current point of the cairo context."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_layout_line"
              c:identifier="pango_cairo_show_layout_line"
              doc="Draws a #PangoLayoutLine in the specified cairo context.
The origin of the glyphs (the left edge of the line) will
be drawn at the current point of the cairo context."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <type name="Pango.LayoutLine" c:type="PangoLayoutLine*"/>
        </parameter>
      </parameters>
    </function>
    <function name="update_context"
              c:identifier="pango_cairo_update_context"
              doc="Updates a #PangoContext previously created for use with Cairo to
match the current transformation and target surface of a Cairo
context. If any layouts have been created for the context,
it&apos;s necessary to call pango_layout_context_changed() on those
layouts."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="update_layout"
              c:identifier="pango_cairo_update_layout"
              doc="Updates the private #PangoContext of a #PangoLayout created with
pango_cairo_create_layout() to match the current transformation
and target surface of a Cairo context."
              version="1.10">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
